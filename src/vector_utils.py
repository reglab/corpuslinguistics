#
# Note: code adapted from https://github.com/mebrunet/understanding-bias/blob/master/src/GloVe.jl
#

import numpy as np
from typing import Tuple, Dict, List


def load_fulltxt_vectors(vectors_file: str) -> Tuple[Dict[str, np.array], Dict[str, np.array], Dict[str, np.array]]:
    """
    Reads a .txt file containing center, word vectors and their respective
    biases. This output is generated by training the GloVe model using the
    BINARY=0 and MODEL=0 parameters.
    :param vectors_file:
    :return:
    """
    # Read vectors
    with open(vectors_file, 'r') as f:
        inputs = {}
        for line in f:
            # Skip lines that are whitespace
            if str.strip(line) == '':
                continue
            vals = line.rstrip().split(' ')
            inputs[vals[0]] = [float(x) for x in vals[1:]]

    # Get V
    vocab = list(inputs.keys())
    V = len(vocab)
    d = (len(inputs[list(inputs.keys())[0]]) - 2) / 2
    assert d.is_integer()
    d = int(d)

    # Set up constants and input/output vectors
    W = np.zeros((V, d))
    U = np.zeros((V, d))
    b_w = np.zeros((V, 1))
    b_u = np.zeros((V, 1))

    # Word vectors and biases, Context vectors and biases
    for i in range(V):
        full_vec = inputs[vocab[i]]
        W[i, :] = full_vec[:d]
        b_w[i] = full_vec[d]
        U[i, :] = full_vec[d+1:-1]
        b_u[i] = full_vec[-1]

    # Generate output vectors (W + U)
    output = W + U
    vectors = {}
    for i in range(V):
        vals = output[i, :]
        vectors[vocab[i]] = vals.tolist()

    # Generate center vectors (W) in the same format
    center_vectors = {}
    for i in range(V):
        vals = W[i, :]
        center_vectors[vocab[i]] = vals.tolist()

    parameter_dict = {'W': W, 'b_w': b_w, 'U': U, 'b_u': b_u, 'vocab': vocab}
    return parameter_dict, vectors, center_vectors
